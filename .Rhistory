cancer_sample %>%
pivot_longer(cols = -diagnosis,
names_to = "variable",
values_to = "value") %>%
glimpse()
}, error = function(e) message("Data might already be tidy or has columns not suitable for pivoting."))
# View first 8 columns and first few rows
cancer_sample %>%
select(1:8) %>%
head()
# Check data structure of these columns
cancer_sample %>%
select(1:8) %>%
glimpse()
# Check if there are any cells that contain multiple values
cancer_sample %>%
select(1:8) %>%
summarise(across(everything(), ~ any(grepl(",|;", .x)))) %>%
pivot_longer(everything(), names_to = "column", values_to = "has_multiple_values")
# Summary note
cat("Each row should represent one tumor observation,",
"each column one variable (e.g., mean radius, texture, etc.),",
"and each cell one numeric or categorical value.")
### 2.1 Is the data tidy?
# Show the first 8 columns and a few rows to inspect structure
cancer_sample %>%
select(1:8) %>%
head()
# Check data types for the first 8 columns
cancer_sample %>%
select(1:8) %>%
glimpse()
### 2.1 Is the data tidy?
# Show the first 8 columns and a few rows to inspect structure
cancer_sample %>%
select(1:8) %>%
head()
cancer_sample %>%
select(1:8) %>%
head()
cancer_sample %>%
select(1:8) %>%
slice(1:16)
head()
cancer_sample %>%
select(1:8) %>%
slice(1:16)
head(cancer_sample)
cancer_sample_label <- cancer_sample %>%
unite(col = "label", tumor_size_cat, radius_mean, diagnosis, id, sep = "_") %>%
arrange(tumor_size_cat)  # 按 tumor_size_cat 排序
library(tidyverse)
# 假设你的数据叫 cancer_sample
# 先选出相关列
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
# 创建 label 列，把多个列合并为一个字符
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(ID, diagnosis, tumor_size_cat, radius_mean, sep = "_"))
# 查看前几行
head(cancer_sample_untidy)
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(ID, diagnosis, tumor_size_cat, radius_mean, sep = "_"))
head(cancer_sample_untidy)
arrange(tumor_size_cat)  # 按照 small -> medium -> large 排序
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(ID, diagnosis, tumor_size_cat, radius_mean, sep = "_"))
head(cancer_sample_untidy)
arrange(tumor_size_cat)  # 按照 small -> medium -> large 排序
cancer_sample_subset <- cancer_sample_subset %>%
mutate(tumor_size_cat = factor(tumor_size_cat, levels = c("small", "medium", "large"), ordered = TRUE))
arrange(tumor_size_cat)  # 按照 small -> medium -> large 排序
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(tumor_size_cat, diagnosis, radius_mean, ID, sep = "_"))
head(cancer_sample_untidy)
cancer_sample_subset <- cancer_sample_subset %>%
mutate(tumor_size_cat = factor(tumor_size_cat, levels = c("small", "medium", "large"), ordered = TRUE))
arrange(tumor_size_cat)  # 按照 small -> medium -> large 排序
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(tumor_size_cat, diagnosis, radius_mean, ID, sep = "_"))
head(cancer_sample_untidy)
cancer_sample_subset <- cancer_sample_subset %>%
mutate(tumor_size_cat = factor(tumor_size_cat, levels = c("small", "medium", "large"), ordered = TRUE))
arrange(tumor_size_cat)  # 按照 small -> medium -> large 排序
library(tidyverse)
# 假设你的数据叫 cancer_sample，并且已经有 tumor_size_cat 列
# 先选出相关列
cancer_sample_subset <- cancer_sample %>%
select(ID, diagnosis, tumor_size_cat, radius_mean)
# 确保 tumor_size_cat 是有序因子
cancer_sample_subset <- cancer_sample_subset %>%
mutate(tumor_size_cat = factor(tumor_size_cat, levels = c("small", "medium", "large")))
# 创建 label 列，把多个列合并为一个字符
cancer_sample_untidy <- cancer_sample_subset %>%
mutate(label = paste(ID, diagnosis, tumor_size_cat, radius_mean, sep = "_")) %>%
arrange(tumor_size_cat)  # 按照 tumor_size_cat 排序
# 查看前几行
head(cancer_sample_untidy)
cancer_sample <- cancer_sample %>%
mutate(label = paste(tumor_size_cat, radius_mean, diagnosis, sep = "_"))
cancer_sample %>%
select(ID, label) %>%
slice(1:16)
cancer_sample_sorted <- cancer_sample %>%
mutate(size_order = str_sub(label, 1, 1)) %>%
mutate(size_order = factor(size_order, levels = c("S", "M", "L"))) %>% # small->medium->large
arrange(size_order) %>%
select(ID, label)
slice(cancer_sample_sorted, 1:16)
# 选择变量
Y <- "tumor_volume"
# 拟合线性模型，肿瘤体积 ~ 良性/恶性
tumor_size_model <- lm(tumor_volume ~ diagnosis, data = cancer_sample)
# 打印模型结果
summary(tumor_size_model)
# 加载 broom 包
library(broom)
# 使用 tidy() 提取回归系数和 p 值
model_summary <- tidy(lm(tumor_volume ~ diagnosis, data = cancer_sample))
model_summary
model_summary <- tidy(lm(tumor_volume ~ diagnosis, data = cancer_sample))
model_summary
broom_model <- glance(linear_model)
broom_model <- glance(tumor_size_model)
broom_model
write.csv(q4_data, file = here::here("output", "q4_data.csv"), row.names = FALSE)
write.csv(q4_data, file = here::here("output", "q4_data.csv"), row.names = FALSE)
broom_model <- glance(tumor_size_model)
broom_model
write.csv(q4_data, file = here::here("output", "q4_data.csv"), row.names = FALSE)
write.csv(q4_data, file = here::here("output", "q4_data.csv"), row.names = FALSE)
write.csv(q4_data, file = here::here("output", "q4_data.csv"), row.names = FALSE)
write.csv(q4_data,file=here::here("output","q4_data.csv"), row.names=FALSE)
write_csv(tumor_size_summary, here("output", "tumor_size_summary.csv") row.names=FALSE))
write_csv(tumor_size_summary, here("output", "tumor_size_summary.csv"))
# 如果还没安装 here，可以先安装
# install.packages("here")
library(here)
if (!dir.exists(here("output"))) {
dir.create(here("output"))
}
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
library(readr)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
library(readr)
write.csv(tumor_size_summary, file = here::here("output", "tumor_size_summary.csv"), row.names = FALSE)
saveRDS(broom_model, "output/Broom_Model.rds")
# 加载 here 包
library(here)
# 如果 output 文件夹不存在，则创建
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# 确保 summary 表是 data.frame
tumor_size_summary_df <- as.data.frame(tumor_size_summary)
# 确保有 output 文件夹
if(!dir.exists(here::here("output"))) {
dir.create(here::here("output"))
}
# 假设我们选择 radius_summary 表来保存
write.csv(radius_summary,
file = here::here("output", "radius_summary.csv"),
row.names = FALSE)
# 输出文件路径，方便确认
here::here("output", "radius_summary.csv")
write.csv(radius_summary,
file = here::here("output", "radius_summary.csv"),
row.names = FALSE)
here::here("output", "radius_summary.csv")
# 保存模型对象为 RDS 文件
saveRDS(tumor_size_model, file = here::here("output", "tumor_size_model.rds"))
# 读取 RDS 文件
loaded_model <- readRDS(here::here("output", "tumor_size_model.rds"))
# 查看加载后的模型对象
loaded_model
# 保存模型对象到 output 文件夹
saveRDS(tumor_size_model, file = here::here("output", "tumor_size_model.rds"))
# 重新加载模型对象
loaded_model <- readRDS(here::here("output", "tumor_size_model.rds"))
# 打印加载后的模型，确认无误
summary(loaded_model)
# 保存模型对象到 output 文件夹
saveRDS(tumor_size_model, file = here::here("output", "tumor_size_model.rds"))
# 重新加载模型对象
readRDS(here::here("output", "tumor_size_model.rds"))
saveRDS(tumor_size_model, file = here::here("output", "tumor_size_model.rds"))
loaded_model <- readRDS(here::here("output", "tumor_size_model.rds"))
summary(loaded_model)
library(broom)
broom_model <- glance(tumor_size_model)
broom_model
# 选择与肿瘤粗糙度和肿瘤大小相关的列
analysis_data <- cancer_sample %>%
select(ID, diagnosis, radius_mean, smoothness_mean, tumor_volume, tumor_size_cat) %>%
# 只保留非缺失值的行
filter(!is.na(radius_mean), !is.na(smoothness_mean), !is.na(tumor_volume)) %>%
# 确保诊断列是因子
mutate(diagnosis = factor(diagnosis, levels = c("B", "M")),
tumor_size_cat = factor(tumor_size_cat, levels = c("Small", "Medium", "Large")))
# 查看前几行
head(analysis_data)
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 0.25) ~ "R_Q1",
radius_mean < quantile(radius_mean, 0.5)  ~ "R_Q2",
radius_mean < quantile(radius_mean, 0.75) ~ "R_Q3",
TRUE ~ "R_Q4"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 0.25) ~ "S_Q1",
smoothness_mean < quantile(smoothness_mean, 0.5)  ~ "S_Q2",
smoothness_mean < quantile(smoothness_mean, 0.75) ~ "S_Q3",
TRUE ~ "S_Q4"
),
combined_group = paste(radius_group, smoothness_group, sep = "_")
)
combined_summary <- cancer_sample %>%
group_by(combined_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
) %>%
arrange(desc(malignant_prop))
combined_summary
library(dplyr)
# 将 radius_mean 和 smoothness_mean 分为四组
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 0.25) ~ "R1",
radius_mean < quantile(radius_mean, 0.5) ~ "R2",
radius_mean < quantile(radius_mean, 0.75) ~ "R3",
TRUE ~ "R4"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 0.25) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 0.5) ~ "S2",
smoothness_mean < quantile(smoothness_mean, 0.75) ~ "S3",
TRUE ~ "S4"
),
combined_group = paste0(radius_group, "-", smoothness_group)
)
# 计算每个组合组别的恶性肿瘤数量和占比
combined_summary <- cancer_sample %>%
group_by(combined_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
) %>%
arrange(desc(malignant_prop))
combined_summary
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 200, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group",
x = "Tumor Volume", y = "Count") +
theme_minimal()
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 500, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group (Binwidth=500)",
x = "Tumor Volume", y = "Count") +
theme_minimal()
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 1000, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group (Binwidth=1000)",
x = "Tumor Volume", y = "Count") +
theme_minimal()
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 1/3) ~ "R1",
radius_mean < quantile(radius_mean, 2/3) ~ "R2",
TRUE ~ "R3"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 1/3) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 2/3) ~ "S2",
TRUE ~ "S3"
),
combo_group = paste(radius_group, smoothness_group, sep = "-")
)
# Step 2: 计算每个组合组别的总数和恶性肿瘤比例
combo_summary <- cancer_sample %>%
group_by(combo_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
)
combined_summary
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 1/3) ~ "R1",
radius_mean < quantile(radius_mean, 2/3) ~ "R2",
TRUE ~ "R3"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 1/3) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 2/3) ~ "S2",
TRUE ~ "S3"
),
combo_group = paste(radius_group, smoothness_group, sep = "-")
)
# Step 2: 计算每个组合组别的总数和恶性肿瘤比例
combo_summary <- cancer_sample %>%
group_by(combo_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
)
combo_summary
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 200, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group",
x = "Tumor Volume", y = "Count") +
theme_minimal()
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 500, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group (Binwidth=500)",
x = "Tumor Volume", y = "Count") +
theme_minimal()
ggplot(cancer_sample, aes(x = tumor_volume, fill = diagnosis)) +
geom_histogram(binwidth = 1000, alpha = 0.6, position = "identity") +
facet_wrap(~combined_group, scales = "free") +
labs(title = "Tumor Volume Distribution by Combined Radius & Smoothness Group (Binwidth=1000)",
x = "Tumor Volume", y = "Count") +
theme_minimal()
ggplot(group_data, aes(x = tumor_volume)) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Tumor Volume (Default Bins)", x = "Tumor Volume", y = "Count")
group_data <- cancer_sample %>% filter(feature_group == "R3-S3")
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 1/3) ~ "R1",
radius_mean < quantile(radius_mean, 2/3) ~ "R2",
TRUE ~ "R3"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 1/3) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 2/3) ~ "S2",
TRUE ~ "S3"
),
combo_group = paste(radius_group, smoothness_group, sep = "-")
)
# Step 2: 计算每个组合组别的总数和恶性肿瘤比例
combo_summary <- cancer_sample %>%
group_by(combo_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
)
combo_summary
group_data <- cancer_sample %>% filter(feature_group == "R3-S3")
cancer_sample %>%
ggplot(aes(x = malignant_prop)) +
geom_histogram(binwidth = 0.05, fill = "steelblue", color = "black") +
labs(
title = "Histogram of Malignant Proportion by Combo Group (binwidth = 0.05)",
x = "Malignant Proportion",
y = "Count"
) +
theme_minimal()
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 1/3) ~ "R1",
radius_mean < quantile(radius_mean, 2/3) ~ "R2",
TRUE ~ "R3"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 1/3) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 2/3) ~ "S2",
TRUE ~ "S3"
),
combo_group = paste(radius_group, smoothness_group, sep = "-")
)
combo_summary <- cancer_sample %>%
group_by(combo_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
)
combo_summary
cancer_sample %>%
ggplot(aes(x = malignant_prop)) +
geom_histogram(binwidth = 0.05, fill = "steelblue", color = "black") +
labs(
title = "Histogram of Malignant Proportion by Combo Group (binwidth = 0.05)",
x = "Malignant Proportion",
y = "Count"
) +
theme_minimal()
cancer_sample <- cancer_sample %>%
mutate(
radius_group = case_when(
radius_mean < quantile(radius_mean, 1/3) ~ "R1",
radius_mean < quantile(radius_mean, 2/3) ~ "R2",
TRUE ~ "R3"
),
smoothness_group = case_when(
smoothness_mean < quantile(smoothness_mean, 1/3) ~ "S1",
smoothness_mean < quantile(smoothness_mean, 2/3) ~ "S2",
TRUE ~ "S3"
),
# 组合两个分类变量
combined_group = paste(radius_group, smoothness_group, sep = "-")
)
# 2. 计算每个组合组别的恶性肿瘤占比
combined_summary <- cancer_sample %>%
group_by(combined_group) %>%
summarise(
total = n(),
malignant_count = sum(diagnosis == "M"),
malignant_prop = malignant_count / total
)
combined_summary
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 0.5, fill="lightblue", color="black") +
labs(title="Histogram with binwidth 0.5") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, fill="lightgreen", color="black") +
labs(title="Histogram with binwidth 1") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 2, fill="salmon", color="black") +
labs(title="Histogram with binwidth 2") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 0.5, fill="lightblue", color="black") +
labs(title="Histogram with binwidth 0.5") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, fill="green", color="black") +
labs(title="Histogram with binwidth 1") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 2, fill="salmon", color="black") +
labs(title="Histogram with binwidth 2") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 0.5, fill="blue", color="black") +
labs(title="Histogram with binwidth 0.5") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, fill="green", color="black") +
labs(title="Histogram with binwidth 1") +
theme_minimal()
ggplot(cancer_sample, aes(x = radius_mean)) +
geom_histogram(binwidth = 2, fill="red", color="black") +
labs(title="Histogram with binwidth 2") +
theme_minimal()
analysis_data <- cancer_sample %>%
select(ID, diagnosis, radius_mean, smoothness_mean, tumor_volume, tumor_size_cat) %>%
filter(!is.na(radius_mean), !is.na(smoothness_mean), !is.na(tumor_volume)) %>%
mutate(diagnosis = factor(diagnosis, levels = c("B", "M")),
tumor_size_cat = factor(tumor_size_cat, levels = c("Small", "Medium", "Large")))
head(analysis_data)
ggplot(radius_summary, aes(x = radius_group, y = malignant_prop, group = 1)) +
geom_line(color = "red", linewidth = 1) +
geom_point(size = 3, color = "red") +
labs(
title = "Proportion of Malignant Tumors by Radius Mean Group",
x = "Radius Mean Quartile",
y = "Proportion of Malignant Tumors"
) +
theme_minimal()
ggplot(texture_summary, aes(x = texture_group, y = malignant_prop, group = 1)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(size = 3, color = "blue") +
labs(
title = "Proportion of Malignant Tumors by Texture Mean Group",
x = "Texture Mean Quartile",
y = "Proportion of Malignant Tumors"
) +
theme_minimal()
